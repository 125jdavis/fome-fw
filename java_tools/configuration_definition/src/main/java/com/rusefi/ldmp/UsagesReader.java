package com.rusefi.ldmp;

import com.rusefi.ConfigDefinition;
import org.yaml.snakeyaml.Yaml;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

public class UsagesReader {
    public static void main(String[] args) throws IOException {
        if (args.length != 1) {
            System.err.println("One parameter expected: name of live data yaml input file");
            System.exit(-1);
        }
        String yamlFileName = args[0];
        Yaml yaml = new Yaml();
        Map<String, Object> data = yaml.load(new FileReader(yamlFileName));

        String header = "// generated by gen_live_documentation.sh / UsagesReader.java\n";
        StringBuilder enumContent = new StringBuilder(header +
                "#pragma once\n" +
                "\n" +
                "typedef enum {\n");

        LinkedHashMap<?, ?> liveDocs = (LinkedHashMap) data.get("Usages");

        StringBuilder fragmentsContent = new StringBuilder(
                header +
                        "#include \"pch.h\"\n" +
                        "#include \"FragmentEntry.h\"\n\n" +
                        "#include \"tunerstudio.h\"\n" +
                        "static FragmentEntry fragments[" + liveDocs.size() + "];\n\n" +
                        "void initFragments() {\n");

        int index = 0;

        for (Map.Entry entry : liveDocs.entrySet()) {
            String name = (String) entry.getKey();
            System.out.println(" " + name);
            System.out.println("  " + entry.getValue());
            List elements = (List) entry.getValue();

            String javaName = (String) elements.get(0);
            String folder = (String) elements.get(1);
//            String macroName = elements.size() > 2 ? ((String)elements.get(2)).trim() : "";


            ConfigDefinition.main(new String[]{
                    ConfigDefinition.KEY_DEFINITION,
                    folder + File.separator + name + ".txt",

                    ConfigDefinition.KEY_JAVA_DESTINATION,
                    "../java_console/models/src/main/java/com/rusefi/config/generated/" + javaName,

                    ConfigDefinition.KEY_C_DESTINATION,
                    folder + File.separator + name + "_generated.h"
            });

            String enumName = "LDS_" + name;
            String type = name + "_s"; // convention
            enumContent.append(enumName + ",\n");

            fragmentsContent
                    .append("\tfragments[")
                    .append(index++)
                    .append("].init(")
                    .append("(const uint8_t *)getStructAddr(")
                    .append(enumName)
                    .append("), sizeof(")
                    .append(type)
                    .append("));\n");
        }
        enumContent.append("} live_data_e;\n");

        try (FileWriter fw = new FileWriter("console/binary/generated/live_data_ids.h")) {
            fw.write(enumContent.toString());
        }

        fragmentsContent.append("};\n");

        try (FileWriter fw = new FileWriter("console/binary/generated/live_data_fragments.cpp")) {
            fw.write(fragmentsContent.toString());
        }
    }
}
