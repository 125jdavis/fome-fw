struct_no_prefix ts_outputs_s

bit sd_present
bit isIgnitionEnabledIndicator;
bit isInjectionEnabledIndicator;
bit sd_logging_internal
bit isCylinderCleanupActivated;
bit isFuelPumpOn;
bit isFanOn;
bit isO2HeaterOn;
bit checkEngine;
bit needBurn;

bit sd_msd
bit clutchUpState;
bit clutchDownState;
bit isFan2On
bit unusedb14;
bit brakePedalState;
bit toothLogReady;
bit acSwitchState;
bit isTpsError;
bit isCltError;
bit isMapError;
bit isIatError;
bit acState;
bit isTriggerError;
bit hasCriticalError;
bit isWarnNow;
bit isPedalError;
bit isKnockChipOk;
bit launchTriggered;
bit isTps2Error;
bit isIdleClosedLoop;
bit isIdleCoasting;

uint16_t autoscale rpm;;"",1, 0, 0, 0, 0

uint16_t rpmAcceleration;;"",1, 0, 0, 0, 0

	uint16_t autoscale speedToRpmRatio;;"",{1/@@PACK_MULT_PERCENT@@}, 0, 0, 0, 0
	uint8_t autoscale vehicleSpeedKph;;"",1, 0, 0, 0, 0
	uint8_t autoscale internalMcuTemperature;;"",1, 0, 0, 0, 0

	uint16_t autoscale coolantTemperature;;"",{1/@@PACK_MULT_TEMPERATURE@@}, 0, 0, 0, 0
	uint16_t autoscale intakeAirTemperature;;"",{1/@@PACK_MULT_TEMPERATURE@@}, 0, 0, 0, 0

	uint16_t autoscale auxTemp1;;"",{1/@@PACK_MULT_TEMPERATURE@@}, 0, 0, 0, 0
	uint16_t autoscale auxTemp2;;"",{1/@@PACK_MULT_TEMPERATURE@@}, 0, 0, 0, 0

	uint16_t autoscale throttlePosition;;"",{1/@@PACK_MULT_PERCENT@@}, 0, 0, 0, 0
	uint16_t autoscale pedalPosition;;"",{1/@@PACK_MULT_PERCENT@@}, 0, 0, 0, 0

	uint16_t tpsADC;;"", 1, 0, 0, 0, 0
	uint16_t autoscale massAirFlowVoltage;;"",{1/@@PACK_MULT_VOLTAGE@@}, 0, 0, 0, 0

	uint16_t autoscale massAirFlow;;"",{1/@@PACK_MULT_MASS_FLOW@@}, 0, 0, 0, 0
	uint16_t autoscale manifoldAirPressure;;"",{1/@@PACK_MULT_PRESSURE@@}, 0, 0, 0, 0
	uint16_t autoscale baroPressure;;"",{1/@@PACK_MULT_PRESSURE@@}, 0, 0, 0, 0

	uint16_t autoscale lambda;;"",{1/@@PACK_MULT_LAMBDA@@}, 0, 0, 0, 0
	uint8_t autoscale knockRetard;;"",{1/10}, 0, 0, 0, 0
	uint8_t unused37;;"",1, 0, 0, 0, 0

	uint16_t autoscale vBatt;;"",{1/@@PACK_MULT_VOLTAGE@@}, 0, 0, 0, 0

	uint16_t autoscale oilPressure;;"",{1/@@PACK_MULT_PRESSURE@@}, 0, 0, 0, 0
	uint16_t autoscale vvtPositionB1I;;"",{1/@@PACK_MULT_ANGLE@@}, 0, 0, 0, 0

	uint16_t autoscale chargeAirMass;;"",{1/1000}, 0, 0, 0, 0
	uint16_t autoscale crankingFuelMass;airmass in mg, 0-65 grams;"",{1/@@PACK_MULT_FUEL_MASS@@}, 0, 0, 0, 0

	uint16_t autoscale currentTargetAfr;;"",{1/@@PACK_MULT_AFR@@}, 0, 0, 0, 0
	uint16_t autoscale fuelBase;This is the raw value we take from the fuel map or base fuel algorithm, before the corrections;"",{1/@@PACK_MULT_FUEL_MASS@@}, 0, 0, 0, 0

	uint16_t autoscale fuelRunning;Total fuel with CLT IAT and TPS acceleration without injector lag corrections per cycle, as pulse per cycle;"",{1/@@PACK_MULT_FUEL_MASS@@}, 0, 0, 0, 0
	uint16_t autoscale actualLastInjection;Actual last injection time - including all compensation and injection mode;"",{1/@@PACK_MULT_MS@@}, 0, 0, 0, 0


	uint8_t autoscale injectorDutyCycle;;"",{1/2}, 0, 0, 0, 0
	uint8_t autoscale veValue;;"",{1/2}, 0, 0, 0, 0
	uint16_t autoscale injectionOffset;;"",{1/@@PACK_MULT_ANGLE@@}, 0, 0, 0, 0

	uint16_t autoscale tCharge;;"",{1/@@PACK_MULT_TEMPERATURE@@}, 0, 0, 0, 0

!  Corrections
	uint16_t autoscale injectorLagMs;;"",{1/@@PACK_MULT_MS@@}, 0, 0, 0, 0
	uint16_t autoscale iatCorrection;;"",{1/@@PACK_MULT_PERCENT@@}, 0, 0, 0, 0
	uint16_t autoscale cltCorrection;;"",{1/@@PACK_MULT_PERCENT@@}, 0, 0, 0, 0
	uint16_t autoscale baroCorrection;;"",{1/@@PACK_MULT_PERCENT@@}, 0, 0, 0, 0
	uint16_t autoscale currentEnginePhase;;"",1, 0, 0, 0, 0
! Wall model AE
	uint16_t autoscale wallFuelAmount;;"",{1/@@PACK_MULT_FUEL_MASS@@}, 0, 0, 0, 0
	uint16_t autoscale wallFuelCorrection;;"",{1/@@PACK_MULT_FUEL_MASS@@}, 0, 0, 0, 0

	uint16_t autoscale unused76;;"",{1/1}, 0, 0, 0, 0
	uint16_t autoscale deltaTps;TPS acceleration enrichment;"",{1/@@PACK_MULT_PERCENT@@}, 0, 0, 0, 0

	uint16_t autoscale unused80;;"",{1/1}, 0, 0, 0, 0
	uint16_t autoscale tpsAccelFuel;;"",{1/@@PACK_MULT_MS@@}, 0, 0, 0, 0
! Ignition
	uint16_t autoscale ignitionAdvance;;"",{1/@@PACK_MULT_ANGLE@@}, 0, 0, 0, 0
	uint16_t autoscale sparkDwell;;"",{1/@@PACK_MULT_MS@@}, 0, 0, 0, 0

	uint16_t autoscale coilDutyCycle;;"",{1/@@PACK_MULT_PERCENT@@}, 0, 0, 0, 0
! Idle & ETB
	uint16_t autoscale idlePosition;;"",{1/@@PACK_MULT_PERCENT@@}, 0, 0, 0, 0
	uint16_t autoscale etbTarget;;"",{1/@@PACK_MULT_PERCENT@@}, 0, 0, 0, 0
	uint16_t autoscale etb1DutyCycle;;"",{1/@@PACK_MULT_PERCENT@@}, 0, 0, 0, 0
	uint16_t autoscale etb1Error;;"",{1/@@PACK_MULT_PERCENT@@}, 0, 0, 0, 0
! Fuel system
	uint16_t autoscale fuelTankLevel;;"",{1/@@PACK_MULT_PERCENT@@}, 0, 0, 0, 0

	uint16_t autoscale totalFuelConsumption;;"",{1/1}, 0, 0, 0, 0
	uint16_t autoscale fuelFlowRate;;"",{1/@@PACK_MULT_FUEL_FLOW@@}, 0, 0, 0, 0

! Y axis values for selectable tables
	uint16_t autoscale veTableYAxis;;"",{1/100}, 0, 0, 0, 0
	uint16_t autoscale afrTableYAxis;;"",{1/100}, 0, 0, 0, 0

	float autoscale knockLevel;;"", 1, 0, 0, 0, 0

	uint32_t autoscale timeSeconds;;"", 1, 0, 0, 0, 0
	uint32_t autoscale engineMode;;"", 1, 0, 0, 0, 0
	uint32_t autoscale firmwareVersion;;"", 1, 0, 0, 0, 0

! todo: this not needed in light of TS_SIGNATURE but rusEFI console still uses it. Need to migrate
! rusEFI console from TS_FILE_VERSION to TS_SIGNATURE :(
	uint32_t autoscale tsConfigVersion;;"", 1, 0, 0, 0, 0


	! These two fields indicate to TS that we'd like to set a particular field to a particular value
	! We use a maintainConstantValue in TS for each field we'd like to set, like this:
	!		maintainConstantValue = tpsMax, { (calibrationMode == 1 ) ? calibrationValue : tpsMax }
	!		maintainConstantValue = tpsMin, { (calibrationMode == 2 ) ? calibrationValue : tpsMin }
	! When the mode is set to a particular value, TS will copy the calibrationValue in to the specified field.
	!
	! With this simple construct, the ECU can send any number of internally computed configuration fields
	! back to TunerStudio, getting around the problem of setting values on the controller without TS's knowledge.
	! The ECU simply has to sequentially set a mode/value, wait briefly, then repeat until all the values
	! it wants to send have been sent.
	float autoscale calibrationValue;;"", 1, 0, 0, 0, 0
end_struct
